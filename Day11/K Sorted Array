Given an array of n distinct elements. Check whether the given array is a k sorted array or not. A k sorted array is an array where each element is at most k distance away from its target position in the sorted array.


Example 1:

Input:
N=6
arr[] = {3, 2, 1, 5, 6, 4} 
K = 2
Output: Yes
Explanation:
Every element is at most 2 distance 
away from its target position in the
sorted array.  
Example 2:

Input:
N=7
arr[] = {13, 8, 10, 7, 15, 14, 12}
K = 1
Output: No

Your Task:
Since, this is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function isKSortedArray() that takes array arr, integer n and integer k as parameters and return "Yes" if the array is a k sorted array else return "No".


Expected Time Complexity: O(NlogN).
Expected Auxiliary Space: O(N).


Constraints:
1 ≤ N ≤ 105
0 ≤ K ≤ N
--------------------------------------------
//Takes O(nlogn) because for each element, we do binary search O(logn).So for n elements,
//it takes O(nlogn)
class Solution {
  public:
  int binarySearch(int val, int temp[], int l, int u)
  {
      while(l<=u)
      {
          int mid =(l+u)/2;
          if(temp[mid]==val)
          {
              return mid;
          }
          else if(temp[mid]<val)//if mid is 
          {
             l = mid+1;
          }
          else
          {
              u = mid-1;
          }
      }
      return -1;
  }
    string isKSortedArray(int arr[], int n, int k)
    {
        //code here
        int temp[n];
        for(int i = 0;i<n;i++)
        {
            temp[i] = arr[i];//copy all elements of arr into temp[]
        }
        sort(temp,temp+n);
        for(int i = 0;i<n;i++)//now iterate over the original array and search each element in the sorted array 
        {
            int j = binarySearch(arr[i],temp,0,n-1);
            if(abs(j-i)>k) return "No";
        }
        return "Yes";
    }
