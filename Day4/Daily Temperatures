Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

Example 1:
Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]
Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]
 
Constraints:
1 <= temperatures.length <= 105
30 <= temperatures[i] <= 100
---------------------------------------------------------------------------------
class Solution {
public:
    vector<int> dailyTemperatures(vector<int>& temperatures) {
        vector<int>ans;
        stack<pair<int,int>>st; //the stack has pairs such that first element is the temperature, second element is its index
        int n = temperatures.size();
        for(int i = n-1;i>=0;i--)//iterate from right to left
        {
            if(st.size()==0)
            {
                ans.push_back(0);//no warmer day is possible
            }
            else if(st.size()>0 && st.top().first>temperatures[i])
            {
                ans.push_back(st.top().second-i);//we have found a warmer day, so we push the no. of days to wait to achieve that warmer day
            }
            else
            {
                while(!st.empty() && st.top().first<=temperatures[i])
                {
                    st.pop();//keep popping all pairs that can't be useful in future
                }
                if(st.size()==0) ans.push_back(0);//we couldn't find a warmer day
                else ans.push_back(st.top().second-i);
            }
            st.push({temperatures[i],i});//we push the current temp and its temperature
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
