Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:
1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104
-------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end());//sort the 2-d matrix acc to the first value in each row
        vector<vector<int>> ans;
        int n = intervals.size();//no of rows
        ans.push_back(intervals[0]);//we push the first range as it is in the ans matrix
        int j = 0;//keeping track of current row in ans
        
        for(int i = 1;i<n;i++){//starting from the second range
            if(ans[j][1]>=intervals[i][0]){
                ans[j][1] = max(ans[j][1],intervals[i][1]);
            }
            else//if intervals not overlapping:
            {
                j++;
                ans.push_back(intervals[i]);
            }
        }
        return ans;
    }
};
