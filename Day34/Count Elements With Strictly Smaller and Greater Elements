Given an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.
Example 1:
Input: nums = [11,7,2,15]
Output: 2
Explanation: The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.
Element 11 has element 7 strictly smaller than it and element 15 strictly greater than it.
In total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.
Example 2:

Input: nums = [-3,3,3,90]
Output: 2
Explanation: The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.
Since there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.
 

Constraints:

1 <= nums.length <= 100
-10^5 <= nums[i] <= 10^5
--------------------------------------------------
 //Method 1: Came to my mind...similar to NSL and NGR
class Solution {
public:
    int countElements(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());//sort the array
        int count = 0;
        vector<int>nsl;
        // vector<int>ngr;
        int ngr[n];
        stack<pair<int,int>>st1;
         stack<pair<int,int>>st2;
        for(int i = 0;i<n;i++)//compute nsl
        {
            if(st1.empty())
            {
                nsl.push_back(-1);
            }
            else if(st1.size()>0 && st1.top().first<nums[i])
            {
                nsl.push_back(st1.top().second);
            }
            else if(st1.size()>0 && st1.top().first>=nums[i])
            {
                while(!st1.empty() && st1.top().first>=nums[i])
                {
                    st1.pop();
                }
                if(st1.size()==0) nsl.push_back(-1);
                else nsl.push_back(st1.top().second);
            }
            st1.push({nums[i],i});
        }
        
        for(int i = n-1;i>=0;i--)//compute ngr
        {
            if(st2.empty())
            {
                // ngr.push_back(-1);
                ngr[i] = -1;
            }
            else if(st2.size()>0 && st2.top().first>nums[i])
            {
                // ngr.push_back(st2.top().second);
                ngr[i] = st2.top().second;
            }
            else if(st2.size()>0 && st2.top().first<=nums[i])
            {
                while(!st2.empty() && st2.top().first<=nums[i])
                {
                    st2.pop();
                }
                if(st2.size()==0) 
                {
                    // ngr.push_back(-1);
                    ngr[i] = -1;
                }
                // else ngr.push_back(st2.top().second);
                else ngr[i] = st2.top().second;
            }
            st2.push({nums[i],i});
        }
        // reverse(ngr.begin(),ngr.end());
       // for(int i = 0;i<ngr.size();i++)
       // {
       //     cout<<ngr[i]<<" ";
       // }
        for(int i = 0;i<nsl.size();i++)
        {
            if(nsl[i]>=0 && ngr[i]>=0)
            {
                count++;
                // cout<<count<<" ";
            }
        }
        return count;
    }    
};
---------------------------------------------------------------
//Method 2: Easier but didn't come in my mind
class Solution {
public:
    int countElements(vector<int>& nums) {
        int count = 0;
        int maxim = *max_element(nums.begin(),nums.end());
        int minim = *min_element(nums.begin(),nums.end());
        for(int i = 0;i<nums.size();i++)
        {
            if(nums[i]>minim && nums[i]<maxim)
            {
                count++;
            }
        }
        return count;
    }
    };
   
