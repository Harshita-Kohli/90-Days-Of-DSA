// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;
 // } Driver Code Ends

class Solution
{
    public:
    // int t[1001][1001];
    //Function to return max value that can be put in knapsack of capacity W.
    // int knapSack(int W, int wt[], int val[], int n) 
    // { 
       // Your code here
       //Recursive approach:
       //base case:
    //   if(n==0 || W==0){
    //       return 0;//as we cannot make any profit
    //   }
    //   //recursive call:
    //   if(wt[n-1]<=W)//either inclue or exclude:
    //   {
    //       return max(knapSack(W-wt[n-1],wt,val,n-1),knapSack(W,wt,val,n));
    //   }
    // //   else if(wt[i]>W){//cannot include
    //       return knapSack(W,wt,val,n);
    // //   }
    
    //TopDown approach:
    int topDown(int W, int wt[], int val[], int n){
        //base case:
        if(n==0 || W==0){
            return t[n][W] = 0;//no profit can be made
        }
        if(t[n][W]!=-1){
            return t[n][W];
        }
        if(wt[n-1]<=W)//choice either include or exclude:
        {
            t[n][W] = max(val[n-1]+topDown(W-wt[n-1],wt,val,n-1), topDown(W,wt,val,n-1));
        }
        else
        {
            t[n][W] = topDown(W,wt,val,n-1);
        }
        return t[n][W];
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
      memset(t,-1,sizeof(t));
      return topDown(W,wt,val,n);
    }
    //Bottom Up approach:
    int knapSack(int W, int wt[], int val[], int n) 
    { 
        int t[n+1][W+1];//2d dp array
        //initialisation:
        for(int i = 0;i<n+1;i++){
            for(int j = 0;j<W+1;j++){
                if(i==0 || j==0){
                    t[i][j] = 0;//no profit
                }
            }
        }
        //filling the rest of the 2d dp array
        for(int i = 1;i<n+1;i++){
            for(int j = 1;j<W+1;j++){
                if(wt[i-1]<=j){ //incliude or exclude:
                    t[i][j] = max(val[i-1]+t[i-1][j-wt[i-1]], t[i-1][j]);
                }
                else{ //if wt[i-1]>W, exclude the current item
                    t[i][j] = t[i-1][j];
                }
            }
        }
        return t[n][W];
    }
};

// { Driver Code Starts.

int main()
 {
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //reading number of elements and weight
        int n, w;
        cin>>n>>w;
        
        int val[n];
        int wt[n];
        
        //inserting the values
        for(int i=0;i<n;i++)
            cin>>val[i];
        
        //inserting the weights
        for(int i=0;i<n;i++)
            cin>>wt[i];
        Solution ob;
        //calling method knapSack()
        cout<<ob.knapSack(w, wt, val, n)<<endl;
        
    }
	return 0;
}  // } Driver Code Ends
