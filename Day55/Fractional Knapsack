Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

 

Example 1:

Input:
N = 3, W = 50
values[] = {60,100,120}
weight[] = {10,20,30}
Output:
240.00
Explanation:Total maximum value of item
we can have is 240.00 from the given
capacity of sack. 
Example 2:

Input:
N = 2, W = 50
values[] = {60,100}
weight[] = {10,20}
Output:
160.00
Explanation:
Total maximum value of item
we can have is 160.00 from the given
capacity of sack.
 

Your Task :
Complete the function fractionalKnapsack() that receives maximum capacity , array of structure/class and size n and returns a double value representing the maximum value in knapsack.
Note: The details of structure/class is defined in the comments above the given function.


Expected Time Complexity : O(NlogN)
Expected Auxilliary Space: O(1)


Constraints:
1 <= N <= 10^5
1 <= W <= 10^5
-----------------------------------------
// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Item{
    int value;
    int weight;
};


 // } Driver Code Ends
//class implemented
/*
struct Item{
    int value;
    int weight;
};
*/


class Solution
{
    public:
    static bool cmp(Item item1, Item item2){
        double ratio1 = (double)item1.value/(double)item1.weight;
        double ratio2 = (double)item2.value/(double)item2.weight;
        return ratio1>ratio2;//we want to sort in decreasing order of val:wt ratio
    }
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        // Your code here
        //sort the items acc to value/weight ratio
        sort(arr,arr+n,cmp);
        int wtsum = 0;
        double valsum = 0.0;
        for(int i = 0;i<n;i++)
        {
            if(wtsum+arr[i].weight<=W)//we can include this item completely in the knapsack:
            {
                wtsum = wtsum+arr[i].weight;
                valsum = valsum+arr[i].value;
            }
            else{ //if the complete item cannot be included in the knapsack, we neede to find the partial value of it that can be included 
                int left = W-wtsum;
                double valToBeAdded = arr[i].value*((double)left/(double)arr[i].weight);
                valsum+=valToBeAdded;
                break;//as we cannot include any other item
            }
        }
        return valsum;
    }
        
};


// { Driver Code Starts.
int main()
{
	int t;
	//taking testcases
	cin>>t;
	cout<<setprecision(2)<<fixed;
	while(t--){
	    //size of array and weight
		int n, W;
		cin>>n>>W;
		
		Item arr[n];
		//value and weight of each item
		for(int i=0;i<n;i++){
			cin>>arr[i].value>>arr[i].weight;
		}
		
		//function call
		Solution ob;
		cout<<ob.fractionalKnapsack(W, arr, n)<<endl;
	}
    return 0;
}  // } Driver Code Ends
