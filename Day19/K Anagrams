Given two strings of lowercase alphabets and a value K, your task is to complete the given function which tells if  two strings are K-anagrams of each other or not.

Two strings are called K-anagrams if both of the below conditions are true.
1. Both have same number of characters.
2. Two strings can become anagram by changing at most K characters in a string.

Example:

Input:
str1 = "fodr", str2="gork"
k = 2
Output:
1
Explanation: Can change fd to gk
Your Task:
Since this is a function problem, you don't need to take any input. Just complete the given function areKAnagrams that returns true if the strings can be turned into K-anagrams, else return false.

Constraints:
1 ≤ length of String ≤ 10^5
1 ≤ K ≤ length of String
------------------------------------------------------
class Solution {
  public:
    bool areKAnagrams(string str1, string str2, int k) {
        // code here
        int n = str1.length();
        int m = str2.length();
        unordered_map<char,int>mp;
        if(n!=m) return false;//as the length of both strings is different
        for(int i = 0;i<n;i++)
        {
            mp[str1[i]]++;//keeping freq of each str1[i] inside the map
        }
        int count = 0;//denotes no of different characters
        for(int i = 0;i<m;i++)
        {
            if(mp[str2[i]]>0)//if the str2[i] is also present in str1
            {
                mp[str2[i]]--;
            }
            else //if str2[i] is not found in str1, it is a different character
            {
                count++;
            }
        }
        if(count>k) return false;
        return true;
    }
};
