Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.
Example 1:
Input: num = 38
Output: 2
Explanation: The process is
38 --> 3 + 8 --> 11
11 --> 1 + 1 --> 2 
Since 2 has only one digit, return it.

Example 2:
Input: num = 0
Output: 0
Constraints: 0 <= num <= 2^31 - 1

Follow up: Could you do it without any loop/recursion in O(1) runtime?
----------------------------------------------
//Method 1:
class Solution {
public:
    int helper(int num,int sum){
       int temp = num;
        // cout<<temp<<endl;
        while(temp)
        {
           int n = temp%10; 
           sum += n;
            // cout<<sum<<endl;
            temp = temp/10;
            if(temp==0 && sum>9)//if the sum>9, it means that the number is not a single-digit number
            {
                // cout<<sum<<endl;
                return helper(sum,0);//we send sum as number and reset sum as 0
            }
        }
        return sum;
    }
    int addDigits(int num) {
       
        return helper(num,0);//initially we pass the number and the sum = 0
    }
};
//Method 2: O(1) time and space
class Solution {
public:
   int addDigits(int num) {
        if(num==0) return 0;//0 itself is a single digit number
        if(num%9==0)//if a number is divisible by 9, it means the sum of digits is also divisible by 9(or is either 9 itself, so we must stop at that number as we have achieved a 2-digit number)
        {
            return 9;
        }
        return num%9;//if num%9==1, the sum of its digits is also 1
    }
};
