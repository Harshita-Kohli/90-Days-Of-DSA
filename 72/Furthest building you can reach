class Solution {
public:
    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {
        int n = heights.size();
        priority_queue<int>bricksUsed;//we use max heap becoz we want the max diff of heights at the top of the heap
        int reach = 0;
        int totBricksUsed = 0;
        
        for( ;reach<n-1;reach++){
           int diff = heights[reach+1]-heights[reach];
            
            if(diff<=0){ //if current height is greater than or equal to next, no operation 
                continue;
            }
            
            // if(diff>0){ //if current building's height is less than next , we prefer using bricks first
                
    //CASE1: We must prefer using bricks coz we can later change bricks to ladder 
                if(totBricksUsed+diff<=bricks){ 
                    totBricksUsed += diff;
                    bricksUsed.push(diff);
                }
    //CASE2: If bricks are insufficient, then we think of using ladder and we also check if we can use ladder instead of the brick used previously and thus regain some bricks
                else if(ladders>0){
                    //first check if we can regain some bricks by using ladder there
                    if(!bricksUsed.empty() && bricksUsed.top()>diff){ //agar kabhi pehle humne zyada bricks use ki thi jo abhi current diff se zyada hai to hum us pichle case me bricks ki bajaye ladder use karenge, aur is present case me bricks use karenge. Isse phayda ye hai ki humare paas kuch bricks extra reh jayenge joki pehle nahi thi bachi
                        totBricksUsed = totBricksUsed-bricksUsed.top()+diff;
                        bricksUsed.pop();//we prefer using ladder and regaining some bricks for future use
                        bricksUsed.push(diff);
                    }
                    ladders--;
                }
                else{ // Unfortunately, it's not possible to go ahead any further becoz we neither have bricks nor ladder and current building's hieght<next building
                    break;
                }
            }
        // }
        return reach;
    }
};
