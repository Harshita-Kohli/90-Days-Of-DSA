Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.
----------------------------------------------------------
class Solution {
public:
    bool wordPattern(string pattern, string s) {
        unordered_map<char,string>mp;
        set<string>st;//to make sure the same word of string s is not used multiple times as a key for multiple characters of p
        vector<string>str;
        int i = 0;
        while(i<s.length())//we want to create a vector of strings from the given string s
        {
            string temp;
            while(s[i]!=' ' && i<s.length())
            {
                temp+=s[i];//we create a word
                i++;
            }
            i++;//to skip ' '
            str.push_back(temp);//push the word in the vector
        }
        if(pattern.length()!=str.size()) return false;
        int len = str.size();
        i = 0;//denotes the index of the vector str
        int start = 0;//denotes the index of the pattern 
        while(i<len)
        {
            //if pattern character is found in the map:
            if(mp.find(pattern[start])!=mp.end())
            {
                if(mp[pattern[start]]!=str[i]) return false;
            }
            else //if character is not present in the map but the string corresponding to it is already present in the map, it means it has already been a value of some other character in p
            {
                if(st.count(str[i])>0)
                {
                    return false;
                }
                //otherwise make a pair in the map
                mp[pattern[start]] = str[i];//we make a pair of p[start] with temp string
                st.insert(str[i]);
            }
            i++;
            start++;
        }
        return true;
    }
};
