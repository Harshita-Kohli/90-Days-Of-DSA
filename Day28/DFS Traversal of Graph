Given a connected undirected graph. Perform a Depth First Traversal of the graph.
Note: Use recursive approach to find the DFS traversal of the graph starting from the 0th vertex from left to right according to the graph..


Example 1:

Input:

Output: 0 1 2 4 3
Explanation: 
0 is connected to 1, 2, 4.
1 is connected to 0.
2 is connected to 0.
3 is connected to 4.
4 is connected to 0, 3.
so starting from 0, it will go to 1 then 2
then 4, and then from 4 to 3.
Thus dfs will be 0 1 2 4 3.
Example 2:

Input:

Output: 0 1 2 3
Explanation:
0 is connected to 1 , 3.
1 is connected to 2. 
2 is connected to 1.
3 is connected to 0. 
so starting from 0, it will go to 1 then 2
then back to 0 then 0 to 3
thus dfs will be 0 1 2 3. 

Your task:
You dont need to read input or print anything. Your task is to complete the function dfsOfGraph() which takes the integer V denoting the number of vertices and adjacency list as input parameters and returns  a list containing the DFS traversal of the graph starting from the 0th vertex from left to right according to the graph.


Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)


Constraints:
1 ≤ V, E ≤ 10^4
-----------------------------------------------------------------
// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
  public:
 //RECURSIVE DFS APPROACH:
  void helper(vector<int> adj[], int V, vector<int>&visited,vector<int>&ans,int source)
   {
       if(!visited[source])
       {
           visited[source]=1;
           ans.push_back(source);
           for(auto it:adj[source])
           {
               helper(adj,V,visited,ans,it);//recursive call with it as the source
           }
       }
       return;//when no nbr is left unvisited, we return to the point of call
   }
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        vector<int>visited(V,0);//size is V and initially all nodes are unvisited
        vector<int>ans;
        helper(adj,V,visited,ans,0);
        return ans;
    }
};
  //Iterative DFS is Same as BFS but we use Stack
  //vector<int> dfsOfGraph(int V, vector<int> adj[]) {
      // stack<int>st;
      // vector<int>ans;
      // vector<int>visited(V,0);//size is V and initially all nodes are unvisited
      // st.push(0);//push the first node into stack
      // visited[0] = 1;//make it visited
      // while(!st.empty())
      // {
      //     int temp = st.top();
      //     st.pop();
      //     ans.push_back(temp);
      //     for(auto it:adj[temp])// the unvisited nbr of temp in to stack
      //     {
      //         if(!visited[it])
      //         {
      //             st.push(it);
      //             visited[it] = 1;
      //         }
      //     }
      // }
      // return ans;
  }
// { Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int> ans = obj.dfsOfGraph(V, adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends
