Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

Example 1:
Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.

Example 2:
Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]

Constraints:

1 <= nums.length <= 104
-109 <= nums[i] <= 109
----------------------------------------------------------
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        stack<int> st;
        vector<int> ans;
        int n = nums.size();
        //First Iteration(from right to left)
        for(int i=n-1;i>=0;i--)
        {
		    st.push(nums[i]);//we push all the elements starting from right to left such that after filling, top of the stack will be the 0th element of the array
        }
        //Second iteration,again from right to left. Work the same way as we would do for linear array
        for(int i=n-1;i>=0;i--)
        {
            if(st.size()==0)
                ans.push_back(-1);
            else if(st.size()>0 && st.top()>nums[i])
            {
                ans.push_back(st.top());
            }
            else if(st.size()>0&&st.top()<=nums[i])
            {
                while(st.size()>0&&st.top()<=nums[i])
                    st.pop();
                if(st.size()==0)
                    ans.push_back(-1);
                else
                    ans.push_back(st.top());
            }
            st.push(nums[i]);
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
