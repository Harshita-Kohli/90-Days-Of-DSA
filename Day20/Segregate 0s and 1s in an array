Given an array of length N consisting of only 0s and 1s in random order. Modify the array to segregate 0s on left side and 1s on the right side of the array.

Example 1:

Input:
N = 5
arr[] = {0, 0, 1, 1, 0}
Output: 0 0 0 1 1

Example 2:

Input:
N = 4
Arr[] = {1, 1, 1, 1}
Output: 1 1 1 1
Explanation: There are no 0 in the given array, 
so the modified array is 1 1 1 1.

Your Task:
You don't need to read input or print anything. Your task is to complete the function segregate0and1() which takes arr[] and n as input parameters and modifies arr[] in-place without using any extra memory.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)


Constraints:
1 ≤ N ≤ 10^7
0 ≤ arri ≤ 1
------------------------------------------
class Solution{   
public:
    void segregate0and1(int arr[], int n) {
        // code here
        int lo = 0;
        int hi = n-1;
        while(lo<hi)
        {
           while(arr[lo]==0 && lo<hi)
            {
                lo++;//keep incrementing lo to right to skip all 0s
            }
            while(arr[hi]==1 && lo<hi)
            {
                hi--;//keep decrementing hi to left to skip all 1s
            }
            //here, lo will be pointing to 1 and hi will be pointing to 0
            if(lo<hi)
            {
                swap(arr[lo],arr[hi]);//so we must swap them to bring 0 before 1
                lo++;
                hi--;
            }  
        }
       
    }
};
