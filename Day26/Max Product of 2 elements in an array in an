Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).
 

Example 1:

Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 
Example 2:

Input: nums = [1,5,4,5]
Output: 16
Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.
Example 3:

Input: nums = [3,7]
Output: 12
 

Constraints:

2 <= nums.length <= 500
1 <= nums[i] <= 10^3
---------------------------------------------
// class Solution {
// public:
//O(n^2) approach
//     int maxProduct(vector<int>& nums) {
//         int maxim = INT_MIN;
//         for(int i = 0;i<nums.size()-1;i++)
//         {
//             for(int j = i+1;j<nums.size();j++)
//             {
//                 maxim = max((nums[i]-1) * (nums[j]-1), maxim);
//             }
//         }
//         return maxim;
//     }
// };
//O(n) approach: Single pass approach using exchange() function
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int great = 0;
        int secgreat = 0;
        for(auto num:nums)
        {
            if(num>great)//we make num as great and great as secgreat 
            {
                secgreat = exchange(great, num);//exchange() assigns num to great and assigns the prev value of great to secgreat
            }
            else//if number is smaller than the great, it might be a second greatest, so check if it is greater than secgreat. If so, we mustupdate secgreat
            {
                secgreat = max(num,secgreat);
            }
        }
        return (great-1)*(secgreat-1);
    }
};
