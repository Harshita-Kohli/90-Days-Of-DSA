Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

Example 1:
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:
Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
 

Constraints:

1 <= k <= num.length <= 10^5
num consists of only digits.
num does not have any leading zeros except for the zero itself.
--------------------------------------------------------------------------
class Solution {
public:
    string removeKdigits(string num, int k) {
        string ans;
        //We will push the elements into stack and when top of stack is greater than num[i]( ie. when we have a dip, we will remove the previously found peak)
        stack<char> st;
        for(int i = 0;i<num.length();i++)
        {
            if(st.empty())
            {
                st.push(num[i]);
            }
            else
            {
                while(!st.empty() &&st.top()>num[i] && k>0)//if we encounter a  dip and we still have k>0 so that we can remove some more elements. We pop elements that are greater than current element till k>0
                {
                    st.pop();//we pop the previously found peaks
                    k--;//reduce k
                }
                st.push(num[i]);//push the current element
            }  
        }
        //if in case the given string was: 12345 and k = 3, we must pop the last k digits 
        while(k!=0)
        {
           st.pop();
            k--;
        }
        //pushing stack elements into ans[]
        while(!st.empty())
        {
            ans+=st.top();
            st.pop();
        }
        
        reverse(ans.begin(),ans.end());
        //removing leading zeroes from the ans string
        while(ans.length()>0 && ans[0]=='0')
        {
            ans.erase(0,1);//we erase all leading zeroes
        }
        if(ans.length()>0) return ans;
        return "0";//else if ans.length()==0, ie if ans is an empty string
    }
};
