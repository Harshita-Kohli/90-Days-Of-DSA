Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

 

Example 1:

Input: s = "3[a]2[bc]"
Output: "aaabcbc"
Example 2:

Input: s = "3[a2[c]]"
Output: "accaccacc"
Example 3:

Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"
 

Constraints:

1 <= s.length <= 30
s consists of lowercase English letters, digits, and square brackets '[]'.
s is guaranteed to be a valid input.
All the integers in s are in the range [1, 300].
-----------------------------------------------------------
class Solution {
public:
    string decodeString(string s) {
        stack<char> st;
        string ans = "";//this will store the complete decoded string that is to be returned
        for(int i = 0;i<s.length();i++)
        {
            char ch = s[i];
            if(ch!=']')//push all other characters except ']' into stack 
            {
                st.push(ch);
            }
            else
            {
                string curr_str = "";//this will store the encoded string that is inside the []
                string curr_num = "";//this will store the number of times curr_str needs to be repeated
                
                while(!st.empty() && st.top()!='[')//keep pushing the characters into curr_str untill '[' is encountered
                {
                    curr_str=st.top()+curr_str;
                    st.pop();
                }
                st.pop();//to pop '[' from stack if stack is non-empty
                while(!st.empty() && isdigit(st.top()))
                {
                     curr_num = st.top()+curr_num;//calculate the number for which we have to repeat the curr_str by concatenating stack top till it is a digit
                    st.pop();
                }
                //Convert character curr_num to integer and store in k
                int k = stoi(curr_num);
                //Now construct the encoded string for that particular number k
                while(k--)
                {
                    for(int i = 0;i<curr_str.length();i++)
                    {
                        st.push(curr_str[i]);//keep decoding the encoded string cuur_str acc to k and push that decode string into the stack
                    }
                }
    
            }
          
        }
       while(!st.empty())
       {
            ans = st.top()+ans;
           st.pop();//construct the final decoded string from the stack
       }
        return ans;
    }
};
