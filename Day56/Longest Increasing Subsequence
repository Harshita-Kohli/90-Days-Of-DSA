class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
       int n = nums.size();
        if(n==1) return 1;
        int t[n+1];
        int ans = 0;
        t[0] = 1; //initialisation
        //bottom up approach: O(n^2) Time Complexity
        for(int i = 1;i<n;i++)
        {
            int curmax = 0;//stores the current maximum length of LIS till ith index before comparing with nums[j] elements
            for(int j = 0;j<i;j++) //loop over all indices smaller than i
            {
                if(nums[j]<nums[i])
                {
                   curmax = max(curmax,t[j]); //curmax stores the maximum out of curmax and LIS length ending at j 
                }
               
            }
            //after coming out of inner for loop ie comparing with all nums[j] and finding maximum out of all LISs
             t[i] = curmax+1; //because now we have one more number ie nums[i] which contributes to lis
                if(t[i]>ans)
                {
                    ans = t[i]; //we update our final ans whenever t[i] >previous ans. This way we               avoid looping over the t[] array at the end to compute the maximum out of t[i] to get LIS 
                }
        }
        return ans;
    }
};
