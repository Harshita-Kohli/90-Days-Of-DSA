You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Example 1:
Input: head = [1,2,3,4]
Output: [1,4,2,3]

Example 2:
Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]
 
Constraints:
The number of nodes in the list is in the range [1, 5 * 104].
1 <= Node.val <= 1000
-----------------------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        //using fast and slow pointers
        ListNode* fast = head;
        ListNode* slow = head;
        ListNode* prev = NULL;
        
        //edge case: if linkedlist is empty,return
        if (!head) return;
       
        // finding the middle with the help of two pointer approach
        while (fast->next && fast->next->next) {
            fast = fast->next->next;
            slow = slow->next;
        }
        
        // adding one bit if linked list has even length
        if (fast->next) slow = slow->next;
        
        // Reversing the second half of the list
        while (slow) {
            fast = slow->next;//saving the next of slow in fast
            slow->next = prev;
            prev = slow;
            slow = fast;
        }
        slow = prev;//updating slow
        
        // After reversing the second half, let's merge both the halfes
        while (head && slow) {
            fast = head->next;
            prev = slow->next;
            head->next = slow;
            slow->next = fast;
            head = fast;
            slow = prev;
        }
        // edge case: closing when we had even length arrays
        if (head && head->next) head->next->next = NULL;
    }
};
