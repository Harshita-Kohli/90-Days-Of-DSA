Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.
You can return the answer in any order.

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.

Example 2:
Input: root = [1], target = 1, k = 3
Output: []
 
Constraints:
The number of nodes in the tree is in the range [1, 500].
0 <= Node.val <= 500
All the values Node.val are unique.
target is the value of one of the nodes in the tree.
0 <= k <= 1000
----------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        //We will use 2 BFS traversals. 
        queue<TreeNode*>q;
        unordered_map<TreeNode*,TreeNode*>parent;
        unordered_map<TreeNode*,bool>visited;
        vector<int>ans;
        q.push(root);
        //1st BFS to keep track of the parents of each node
        while(!q.empty()){
            TreeNode* n = q.front();
            q.pop();
            if(n->left){
                q.push(n->left);
                parent[n->left] = n;//to keep the track that n->left node has a parent=n
            }
            if(n->right){
                q.push(n->right);
                parent[n->right] = n;//to keep the track that n->right node has a parent=n
            }
        }
        //2nd BFS to reach all the nodes at a distance of k from target. We include all the children as well as the children of the parent node because we have to go to all nodes at distance k(not just to k children)
        q.push(target);
        visited[target] = true;
        int curr_level = 0;
        while(!q.empty()){
            int size = q.size();
            if(curr_level==k) break;
            for(int i = 0;i<size;i++){
                TreeNode* n = q.front();
                q.pop();
                if(n->left && !visited[n->left]){
                    q.push(n->left);
                    visited[n->left] = true;
                }
                if(n->right && !visited[n->right]){
                    q.push(n->right);
                    visited[n->right] = true;
                }
                if(parent[n] && !visited[parent[n]]){
                    q.push(parent[n]);
                    visited[parent[n]] = true;
                }
            }
          curr_level++;
        }
        while(!q.empty()){
            ans.push_back(q.front()->val);
            q.pop();
        }
        return ans;
    }
};

