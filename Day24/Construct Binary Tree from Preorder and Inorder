Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]
 

Constraints:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder and inorder consist of unique values.
Each value of inorder also appears in preorder.
preorder is guaranteed to be the preorder traversal of the tree.
inorder is guaranteed to be the inorder traversal of the tree.
----------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,int> mp;
    int pre = 0;
    TreeNode* helper(vector<int>& preorder, vector<int>& inorder, int left, int right)
    {
        if(left>right)//we have reached NULL
        {
            return NULL;
        }
        int rootvalue = preorder[pre];//whatever is at pre index in the preorder[] will be the root of the tree
        TreeNode* root = new TreeNode(rootvalue);
        pre++;//we increment the pre index so that we can get to know the next root
        root->left = helper(preorder,inorder,left,mp[rootvalue]-1);
        root->right = helper(preorder,inorder,mp[rootvalue]+1,right);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = inorder.size();
        for(int i = 0;i<inorder.size();i++)
        {
            mp[inorder[i]] = i;//keeping track of indices of inorder[] elements
        }
       return helper(preorder,inorder,0,n-1);
    }
};
