Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.
Example 1:
Input: nums = [1,1,1], k = 2
Output: 2
Example 2:
Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-10^7 <= k <= 10^7
----------------------------------------------------
// //O(n^2)approach:Time limit exceeded!!
// class Solution{
//     public:
//     int subarraySum(vector<int>& nums, int k) {
//         int n = nums.size();
//         int sum[n+1];//we maintain a sum array, where sum[i] denotes the cumulative sum upto i-1th index of nums
//         int count = 0;
//         sum[0] = 0;//the cumulative sum upto -1th index ie before 0th index is 0.This is the case where we include the empty subarray
//         for(int i = 1;i<=nums.size();i++){
//             sum[i] = sum[i-1]+nums[i-1];//maintain the cumulative sum array
//         }
//         for(int start = 0;start<nums.size();start++){
//             for(int end = start+1;end<=nums.size();end++){
//                 if(sum[end]-sum[start]==k)//if the cumulative sum upto end -cumulative sum upto start is equal to k, we have found a subarray with sum==k
//                     count++;
//             }
//         }
//         return count;
//     }
// };
// O(n) Time Complexity
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
       unordered_map<int,int>mp;
        mp.insert({0,1});//we insert a pair {0,1} denoting that there is one subarray having sum = 0(and that subarray is a the empty array)
        int sum=0;
        int ans=0;
        //iterate over the array and keep calculating sum
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
            //if at any index, the sum-so-far minus k is already found in the map, it means that ther is already a subarray with sum k, and now again we found another array with sum = k, so we need to increment the add that already calculated count into the ans variable  
            if(mp.find(sum-k)!=mp.end()){
                ans+=mp[sum-k];
            }
            mp[sum]++; //if the sum-so-far has been found for the first time, we simply put it into the map and increase its freq by 1
        }
        return ans;
    }
};

