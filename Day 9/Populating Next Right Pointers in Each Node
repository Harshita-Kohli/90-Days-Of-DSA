You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Example 1:


Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 212 - 1].
-1000 <= Node.val <= 1000
 

Follow-up:

You may only use constant extra space.
The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.
-------------------------------------------------------------------------------------------------------------------
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/ 
// 3 approaches 
// //O(n) time complexity and O(n) space complexity because of queue
// class Solution {
// public:
//     Node* connect(Node* root) {
//         if(root==NULL) return NULL;
//         queue<Node*>q;
//         q.push(root);
//         q.push(NULL);
//         while(!q.empty()){
//             Node* n = q.front();
//             q.pop();
//             if(n!=NULL){
//                 n->next = q.front();//make connection with the next right
//                 //push left and right children:
//                 if(n->left) q.push(n->left);
//                 if(n->right) q.push(n->right);
//             }
//             if(n==NULL){
//                 if(!q.empty()){
//                     q.push(NULL);
//                 }
//             }
//         }
//         return root;
//     }
// };
// //O(n) time complexity and virtually constant space complexity (Recursive approach ie DFS)
// class Solution {
// public:
//     Node* connect(Node* root) {
//         //base case
//         if(root==NULL){
//             return NULL;
//         }
//         if(root->left)//if left child exists:
//         {
//             root->left->next = root->right;//the right of root will become the next of root->left
//         }
//         if(root->right && root->next)
//         {
//             root->right->next = root->next->left;//by default, root->next is NULL
//         }
//         connect(root->left);
//         connect(root->right);
//         return root;
//     }
// };
//3rd approach: BFS iterative, O(n) time and O(1) space complexity
class Solution{
public:
    Node* connect(Node* root) {
        //Initialize pointers
        Node *prev = root, *curr;
        while (prev) {
            curr = prev;
            while (curr && curr->left) {//for iterating over all the nodes in the same level and connecting them to next pointers
                curr->left->next = curr->right; //connects the left subtree of same level with right subtree of that same level
                if (curr -> next) curr->right->next = curr->next->left;
                curr = curr->next;//connect the rightmost node of a level to the leftmost node of the next level.
            }
            prev = prev -> left;//for moving to the leftmost node in the next level
        }
        return root;
    }
};
