Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.
Example 1:
Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:
Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 
Constraints:
1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.
------------------------------------------------------
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
       //Sliding Window Method:
        int n = s2.length();
        unordered_map<int,int>mp;
        for(int i = 0;i<s1.length();i++){
            mp[s1[i]]++;//maintaining the characters of s1 along with their frequency
        }
        int uniq = mp.size();
        int k = s1.length();//it is the length of s1 string which will be the fixed window size
        int i = 0;
        int j = 0;
        // int count = 0;
        while(j<n)
        {
            if(mp.find(s2[j])!=mp.end())
            {
                mp[s2[j]]--;
                if(mp[s2[j]]==0)
                {
                    uniq--;
                }
            }
           if(j-i+1<k){
               j++;
           } 
            else if(j-i+1==k){ //target window size achieved!
                //step1: calculate final answer
                if(uniq==0)
                {
                    // cout<<"hello"<<endl;
                    return true;//because the string s1 has a permutation of s2
                }
                //step2:remove answer contributed by i
                if(mp.find(s2[i])!=mp.end()){//if ith character is present in the map
                    mp[s2[i]]++;
                    if(mp[s2[i]]==1){
                        uniq++;
                    }
                }
                //step3: slide window forward by maintaining its size
                i++;
                j++;
            }
        }
        return false;
    }
};
