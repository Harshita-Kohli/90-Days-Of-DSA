A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.

Given a row x col grid of integers, how many 3 x 3 "magic square" subgrids are there?  (Each subgrid is contiguous).

 

Example 1:


Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]
Output: 1
Explanation: 
The following subgrid is a 3 x 3 magic square:

while this one is not:

In total, there is only one magic square inside the given grid.
Example 2:

Input: grid = [[8]]
Output: 0
 

Constraints:

row == grid.length
col == grid[i].length
1 <= row, col <= 10
0 <= grid[i][j] <= 15
---------------------------------------------------
class Solution {
public:
    bool check(vector<vector<int>> grid, int i, int j)
    {
        set<int> distinct;
        for(int r = i;r<=i+2;r++)
        {
            for(int c = j;c<=j+2;c++)
            {
                if(grid[r][c]>=1 && grid[r][c]<=9)
                {
                    distinct.insert(grid[r][c]);
                }
            }
        }
        if(distinct.size()!=9)//it means the 3*3 submatrix does not have 9 distinct numbers
        {
            return false;
        }
        int col1 = 0;
       
        col1 = grid[i][j] + grid[i+1][j] + grid[i+2][j];//sum of first column
        
        int col2 = grid[i][j+1]+grid[i+1][j+1]+grid[i+2][j+1];
        int col3 = grid[i][j+2]+grid[i+1][j+2]+grid[i+2][j+2];
        
        int row1 = grid[i][j]+grid[i][j+1]+grid[i][j+2];
        int row2 = grid[i+1][j]+grid[i+1][j+1]+grid[i+1][j+2];
        int row3 = grid[i+2][j]+grid[i+2][j+1]+grid[i+2][j+2];
        
        int diag1 = grid[i][j]+grid[i+1][j+1]+grid[i+2][j+2];
        int diag2 = grid[i][j+2]+grid[i+1][j+1]+grid[i+2][j];
        
        if(row1 == col1 && row2== col1 && row3 == col1 && col2 == col1 && col3==col1 && diag1 == col1 && diag2 ==col1)
        {
            return true;
        }
        return false;
    }
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        int n = grid.size();//rows
        int m = grid[0].size();//columns
        if(n<3 || m<3) return 0;//no 3*3 magic square subgrid can be formed
        int count = 0;
        for(int i = 0;i<n-2;i++)
        {
            for(int j = 0;j<m-2;j++)
            {
                if(check(grid,i,j)) 
                {
                    count+=check(grid,i,j);
                }
            }
        }
        return count;
    }
};
