You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length
Accepted
504,650
Submissions
1
------------------------------------------------------
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int>q;
        vector<int>ans;
        int n = nums.size();
        int i = 0;
        int j = 0;//we use 2 pointers to maintain a sliding window
        while(j<n)
        {
            while(!q.empty() && q.back()<nums[j])
            {
                q.pop_back();//remove all those elements which are not possible candidates for further windows
            }
            q.push_back(nums[j]);
            
            if(j-i+1<k)
            {
                j++;//keep expanding the window
            }
            else if(j-i+1==k)//if target size achieved,then calculate ans
            {
                ans.push_back(q.front());//we push the maximum of that window into ans vector
                if(q.front()==nums[i])
                {
                    q.pop_front();//remove arr[i] from possible answers
                }
                i++;
                j++;
            }
        }
        return ans;
    }
};
