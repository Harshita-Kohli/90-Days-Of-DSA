Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.

The interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.

Return the number of remaining intervals.

 

Example 1:

Input: intervals = [[1,4],[3,6],[2,8]]
Output: 2
Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.
Example 2:

Input: intervals = [[1,4],[2,3]]
Output: 1
 

Constraints:

1 <= intervals.length <= 1000
intervals[i].length == 2
0 <= li <= ri <= 105
All the given intervals are unique.
------------------------------------
class Solution {
public:
    // static bool cmp(vector<int> a, vector<int> b){
    //     return a[0]<b[0];
    // }
    int removeCoveredIntervals(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end());
        int num1 = intervals[0][0];
        int num2 = intervals[0][1];
        int ans = 1;
        for(int i = 1;i<intervals.size();i++){
            if(intervals[i][0]>num1 && intervals[i][1]>num2)//this interval does not cover the interval (num1,num2), thus (nums1, nums2) is a remaining interval
            {
                ans++;//so increment ans
            }
            if(intervals[i][1]>num2)//as the new interval's end > previous interval's end, we must update the num1 and num2 by the new interval
            {
                num1 = intervals[i][0];
                num2 = intervals[i][1];
            }
        }
        return ans;
    }
};
